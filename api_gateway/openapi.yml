openapi: 3.0.3
info:
  title: Unified Availability Service ${stage}
  version: '1.0'
servers:
  - url: http://localhost:{port}
    description: Local development server
    variables:
      port:
        default: '5010'
  - url: https://unified-availability-service.api.qa.patientpop.com
    description: QA server
  - url: https://unified-availability-service.api.stg.patientpop.com
    description: Staging server
  - url: https://unified-availability-service.api.patientpop.com
    description: Production server
paths:
  /v1/status:
    get:
      summary: Retrieve service status
      parameters: [ ]
      responses:
        '200':
          description: Service Available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        '503':
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      description: Retrieve service status
      security:
        - apiKey: [ ]
      operationId: get_status
      x-openapi-router-controller: src.status.controllers.v1
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
        uri: ${network_lb_path}/v1/status
        connectionType: VPC_LINK
        connectionId: ${vpc_link}
        httpMethod: GET
        type: HTTP_PROXY
      tags:
        - status
  /v1/practice/{practice_id}/appointments:
    post:
      parameters:
        - schema:
            type: string
          name: practice_id
          in: path
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AvailabilityRequest'
      summary: Check and reserve availability for appointment booking
      responses:
        '201':
          description: Time Slot Available
          content:
            application/json: {}
        '409':
          description: Time Slot Not Available
          content:
            application/json: {}
      description: Check and reserve availability for appointment booking
      security:
        - apiKey: []
      operationId: initiate_booking
      x-openapi-router-controller: src.appointment.controllers.v1
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '201'
            content:
              application/json: { }
        uri: ${network_lb_path}/v1/practice/{practice_id}/appointments
        connectionType: VPC_LINK
        connectionId: ${vpc_link}
        httpMethod: POST
        type: HTTP_PROXY
        parameters:
          - schema:
              type: string
            name: practice_id
            in: path
            required: true
      tags:
        - availability
    put:
      parameters:
        - in: path
          schema:
            type: string
          name: practice_id
          required: true
        - in: header
          schema:
            type: string
          name: appointment-token
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAppointment'
      summary: Complete fields on Step-C
      responses:
        '204':
          description: Appointment Form Updated
          content:
            application/json: { }
        '401':
          description: Unauthorized Bad Token
          content:
            application/json: { }
        '403':
          description: Invalid Appointment Form Request
          content:
            application/json: { }
      description: Submit Step C for Appointment Form
      security:
        - apiKey: [ ]
      operationId: update_appointment
      x-openapi-router-controller: src.appointment.controllers.v1
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '201'
            content:
              application/json: {}
        uri: ${network_lb_path}/v1/appointments/{practice_id}/appointments
        connectionType: VPC_LINK
        connectionId: ${vpc_link}
        httpMethod: PUT
        type: HTTP_PROXY
        parameters:
          - in: path
            name: practice_id
            schema:
              type: string
            required: true
      tags:
        - appointments
  /v1/practice/{practice_id}:
    parameters:
      - schema:
          type: string
        name: practice_id
        in: path
        required: true
    get:
      summary: Retrieve general information about practice by ID
      tags: [  ]
      operationId: get_practice_information_id
      responses:
        '200':
          description: Practice Information
        '400':
          description: Bad Request
        '404':
          description: Practice not found
      description: Retrieve general information about practice by ID
      security:
        - apiKey: []
      x-openapi-router-controller: src.practice.controllers.v1
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
        uri: ${network_lb_path}/v1/practice/{practice_id}
        connectionType: VPC_LINK
        connectionId: ${vpc_link}
        httpMethod: GET
        type: HTTP_PROXY
        requestParameters:
          integration.request.path.practice_id: method.request.path.practice_id
  /v1/availability/practices/{practice_id}/locations/{location_id}/providers/{provider_id}:
    parameters:
      - schema:
          type: string
        name: practice_id
        in: path
        required: true
      - schema:
          type: string
        name: location_id
        in: path
        required: true
      - schema:
          type: string
        name: provider_id
        in: path
        required: true
      - schema:
          type: string
          format: date
        name: from_date
        in: query
        required: false
      - schema:
          type: string
          format: date
        name: to_date
        in: query
        required: false
    get:
      summary: Retrieve availability for a single day per provider+location
      tags: [  ]
      operationId: get_availability
      responses:
        '200':
          description: Availability Information
        '400':
          description: Bad Request
        '404':
          description: Availability not found
      description: Retrieve availability for a single day per provider+location
      security:
        - apiKey: []
      x-openapi-router-controller: src.availability.controllers.v1
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
        uri: ${network_lb_path}/v1/availability/{practice_id}/{location_id}/{provider_id}
        connectionType: VPC_LINK
        connectionId: ${vpc_link}
        httpMethod: GET
        type: HTTP_PROXY
        requestParameters:
          integration.request.path.practice_id: method.request.path.practice_id
          integration.request.path.location_id: method.request.path.location_id
          integration.request.path.provider_id: method.request.path.provider_id

components:
  securitySchemes:
    apiKey:
      type: apiKey
      name: x-api-key
      in: header
      x-apikeyInfoFunc: src.util.auth.api_key
  schemas:
    Status:
      additionalProperties: false
      type: object
      x-examples:
        ExampleStatus:
          application:
            name: unified-availability-service
            version: 1.0.0
          config:
            env: dev
            log_level: INFO
            serve_swagger_ui: true
            stage: dev
          current_datetime: '2020-09-09T12:09:02.418852'
          health_checks:
            - resource_name: database_connection
              success: true
          success: true
      properties:
        success:
          type: boolean
        current_datetime:
          type: string
          format: date-time
        application:
          $ref: '#/components/schemas/ApplicationStatus'
        heath_checks:
          type: array
          description: ''
          items:
            $ref: '#/components/schemas/HealthCheckStatus'
        config:
          type: object
          description: Configuration information
      required:
        - success
        - application
        - current_datetime
      description: Describes health and status of application. Can be used for autoscaling.
    ApplicationStatus:
      title: ApplicationStatus
      type: object
      description: Application information used in status endpoint.
      required:
        - name
        - version
      properties:
        name:
          type: string
          description: Name of the application
        version:
          type: string
          description: Application Version
    HealthCheckStatus:
      title: HealthCheckStatus
      type: object
      description: The health check status of an application resource.
      required:
        - resource_name
        - success
      properties:
        resource_name:
          type: string
          description: Name of the resource being checked
        success:
          type: boolean
          description: If the resource is healthy
    AvailabilityRequest:
      title: availability request for booking appointment
      type: object
      description: Availability request from user for appointment booking
      x-example:
        ExampleAvailabilityRequest:
          provider_id: 'someDoctorId'
          location_id: 'someLocationId'
          duration: 30
          start_date: '2020-09-02 19:30:00'
      required:
        - provider_id
        - location_id
        - duration
        - start_date
      properties:
        provider_id:
          type: string
        location_id:
          type: string
        calendar_id:
          type: string
        duration:
          type: integer
        start_date:
          type: string
        appointment_types_enabled:
          type: boolean
        reason:
          type: string
        is_telehealth:
          type: boolean
        is_new_patient:
          type: boolean
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        phone:
          type: string
        date_of_birth:
          type: string
        sex:
          type: string
        agree_sms_terms:
          type: boolean
        insurance_provider_id:
          type: string
        insurance_id_number:
          type: string
        insurance_group_number:
          type: string
        insurance_phone:
          type: string
        comment:
          type: string
        origin:
          type: string
      additionalProperties: false
    UpdateAppointment:
      title: Request to fill Step-C (Insurance Information)
      type: object
      description: Since Step-C is optional this request fill the information for Insurance
      x-example:
        ExampleUpdateAppointment:
          insurance_provider_id: "someInsuranceProviderId"
          insurance_id_number: "someInsuranceIdNumber"
          insurance_group_number: "someInsuranceGroupNumber"
          insurance_phone: "(222) 222 2222"
          comment: "some comment"
      required:
        - insurance_provider_id
        - insurance_id_number
        - insurance_group_number
        - insurance_phone
        - comment
      properties:
        insurance_provider_id:
          type: string
        insurance_id_number:
          type: string
        insurance_group_number:
          type: string
        insurance_phone:
          type: string
        comment:
          type: string
